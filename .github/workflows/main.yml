name: Unity Build without WebGL

on:
  workflow_dispatch: {}

jobs:
  unity-build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Library
        uses: actions/cache@v3
        with:
          path: Library
          key: ${{ runner.os }}-${{ matrix.targetPlatform }}-library-${{ hashFiles('**/Library/*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.targetPlatform }}-library-

      - name: Extend Free Disk Space
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@main

      - name: Build Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: '2022.3.10f1'
          targetPlatform: ${{ matrix.targetPlatform }}
          androidExportType: ${{ matrix.targetPlatform == 'Android' && 'androidAppBundle' || '' }}
          androidKeystoreName: ${{ matrix.targetPlatform == 'Android' && secrets.KEYSTORE_NAME }}
          androidKeystoreBase64: ${{ matrix.targetPlatform == 'Android' && secrets.KEYSTORE_FILE }}
          androidKeystorePass: ${{ matrix.targetPlatform == 'Android' && secrets.KEYSTORE_PASSWORD }}
          androidKeyaliasName: ${{ matrix.targetPlatform == 'Android' && secrets.KEY_ALIAS }}
          androidKeyaliasPass: ${{ matrix.targetPlatform == 'Android' && secrets.KEY_PASSWORD }}

      - name: Upload Build
        uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
          
  iOS-build:
    name: Generate IPA
    runs-on: macos-latest
    needs: unity-build

    steps:
      - name: Download Xcode Project
        uses: actions/download-artifact@v3
        with:
          name: Build-iOS
          path: build/iOS

      - name: Create ExportOptions.plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>app-store</string><key>teamID</key><string>ZGQ36244W3</string><key>uploadSymbols</key><true/><key>uploadBitcode</key><true/><key>compileBitcode</key><true/></dict></plist>' > ExportOptions.plist

      - name: Build and Export IPA
        run: |
          xcodebuild -project build/iOS/Unity-iPhone.xcodeproj \
                     -scheme GalacticGuardians \
                     -sdk iphoneos \
                     -configuration Release \
                     build
                     
          xcodebuild archive -project build/iOS/Unity-iPhone.xcodeproj \
                             -scheme Unity-iPhone \
                             -sdk iphoneos \
                             -configuration Release \
                             -archivePath build/iOS/Unity-iPhone.xcarchive
                             
          xcodebuild -exportArchive \
                     -archivePath build/iOS/Unity-iPhone.xcarchive \
                     -exportOptionsPlist ExportOptions.plist \
                     -exportPath build/iOS/app.ipa

      - name: Upload IPA to App Store Connect
        run: |
          xcrun altool --upload-app -f build/iOS/app.ipa \
                       -u ${{ secrets.APPLE_ID }} \
                       -p ${{ secrets.APP_SPECIFIC_PASSWORD }} \
                       --type ios
