name: Unity Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  unity-build:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an iOS player.
          - Android # Build an Android .apk standalone app.
          - WebGL # WebGL.

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Library
        uses: actions/cache@v4
        with:
          path: Library
          key: ${{ runner.os }}-${{ matrix.targetPlatform }}-library-${{ hashFiles('**/Library/*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.targetPlatform }}-library-

      - name: Extend Free Disk Space
        if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@main

      - name: Build Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: '2022.3.17f1'
          targetPlatform: ${{ matrix.targetPlatform }}
          androidExportType: ${{ matrix.targetPlatform == 'Android' && 'androidAppBundle' || '' }}
          androidKeystoreName: ${{ matrix.targetPlatform == 'Android' && secrets.KEYSTORE_NAME }}
          androidKeystoreBase64: ${{ matrix.targetPlatform == 'Android' && secrets.KEYSTORE_FILE }}
          androidKeystorePass: ${{ matrix.targetPlatform == 'Android' && secrets.KEYSTORE_PASSWORD }}
          androidKeyaliasName: ${{ matrix.targetPlatform == 'Android' && secrets.KEY_ALIAS }}
          androidKeyaliasPass: ${{ matrix.targetPlatform == 'Android' && secrets.KEY_PASSWORD }}

      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}

      - name: Create Deploy Directory
        if: matrix.targetPlatform == 'WebGL'
        run: |
          mkdir deploy

      - name: Copy WebGL Build to Deploy Directory
        if: matrix.targetPlatform == 'WebGL'
        run: |
          cp -R build/WebGL/WebGL/* deploy/

      - name: Deploy to GitHub Pages
        if: matrix.targetPlatform == 'WebGL'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: deploy
          cname: galacticguardians.k-taro56.com
          enable_jekyll: true

  iOS-build:
    name: Generate IPA
    runs-on: macos-latest
    needs: unity-build

    steps:
      - name: Download Xcode Project
        uses: actions/download-artifact@v4
        with:
          name: Build-iOS
          path: build/iOS

      - name: Create ExportOptions.plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"><plist version="1.0"><dict><key>method</key><string>app-store</string><key>teamID</key><string>ZGQ36244W3</string><key>uploadSymbols</key><true/><key>compileBitcode</key><true/></dict></plist>' > ExportOptions.plist
        
      - name: Build Project
        run: |
          xcodebuild -project build/iOS/iOS/Unity-iPhone.xcodeproj \
                     -scheme Unity-iPhone \
                     -sdk iphoneos \
                     -configuration Release \
                     PROVISIONING_PROFILE_SPECIFIER="GalacticGuardians_Provisioning_Profile" \
                     CODE_SIGNING_ALLOWED=NO \
                     build

      - name: Archive Project
        run: |                        
          xcodebuild archive -project build/iOS/iOS/Unity-iPhone.xcodeproj \
                             -scheme Unity-iPhone \
                             -sdk iphoneos \
                             -configuration Release \
                             -archivePath build/iOS/Unity-iPhone.xcarchive \
                             CODE_SIGNING_ALLOWED=NO

      - name: Create Private Key
        run: |
          mkdir private_keys
          echo -n "${{ secrets.APPLE_API_KEY }}" | base64 --decode > ./private_keys/AuthKey_${{ secrets.APPLE_API_ISSUER_ID }}.p8

      - name: Export IPA
        run: |   
          xcodebuild -exportArchive \
                     -archivePath build/iOS/Unity-iPhone.xcarchive \
                     -exportOptionsPlist ExportOptions.plist \
                     -exportPath build/iOS/app.ipa \
                     -allowProvisioningUpdates \
                     -authenticationKeyPath `pwd`/private_keys/AuthKey_${{ secrets.APPLE_API_ISSUER_ID }}.p8 \
                     -authenticationKeyID ${{ secrets.APPLE_API_KEY_ID }} \
                     -authenticationKeyIssuerID  ${{ secrets.APPLE_API_ISSUER_ID }}

                     ls build/iOS/app.ipa

      - name: Upload IPA to App Store Connect
        run: |
          xcrun altool --upload-app -f build/iOS/app.ipa/GalacticGuardians.ipa \
                       -u ${{ secrets.APPLE_ID }} \
                       -p ${{ secrets.APP_SPECIFIC_PASSWORD }} \
                       --type ios
